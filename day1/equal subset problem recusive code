class Solution {
public:

int dp[200][10000] ; 

bool canPartition(vector<int>& nums)
{

    
    // if sum is odd return 0
    // else find sum/2 is available  or not
    
    memset(dp,-1,sizeof(dp)) ;
    
    int sum=0;
    for(auto x:nums) sum += x;
    
    if(sum%2!=0) return 0; 
    int target=sum/2;
    
  return   helper(nums, target , 0);
    
   
     
}

bool helper(vector<int>&nums, int target,int idx)
{
    
  if(idx==nums.size() )
  {
      if(target==0) return 1;
      
      return 0;
  }
    
    if(target<0) return 0;
    
    if(dp[idx][target]!=-1) return dp[idx][target];
    
    return dp[idx][target]= helper(nums,target-nums[idx], idx+1)||helper(nums,target, idx+1);
    
   
}
};
