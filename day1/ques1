// Initial template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function template for C++

class Solution{
    public:
    bool isSafe(int r,int c,int n,vector <vector <int>> &m,vector <vector <int> >&visited)
    {
        if(r==-1||c==-1||r==n||c==n||m[r][c]==0||visited[r][c])return false;
        
        return true;
    }
    void printall(int r,int c,vector < vector<int>> &m,int n,string &path,vector <string> &total,vector <vector <int>> &visited)
    {
         if(r==-1||c==-1||r==n||c==n||m[r][c]==0||visited[r][c])return;
         
         if(r==n-1&&c==n-1)
         {
             total.push_back(path);
             return;
         }
         
         visited[r][c] = 1;
         
         if(isSafe(r+1,c,n,m,visited))
         {
             path.push_back('D');
             printall(r+1,c,m,n,path,total,visited);
             path.pop_back();
         }
         if(isSafe(r,c-1,n,m,visited))
         {
             path.push_back('L');
             printall(r,c-1,m,n,path,total,visited);
             path.pop_back();
         }
         if(isSafe(r,c+1,n,m,visited))
         {
             path.push_back('R');
             printall(r,c+1,m,n,path,total,visited);
             path.pop_back();
         }
         if(isSafe(r-1,c,n,m,visited))
         {
             path.push_back('U');
             printall(r-1,c,m,n,path,total,visited);
             path.pop_back();
         }
         
         visited[r][c]=0;
    }
    vector<string> findPath(vector<vector<int>> &m, int n) 
    {
        string path;
        vector <string> total;
        
        vector<vector<int>> visited( n , vector<int> (n, 0)); 
        
        printall(0,0,m,n,path,total,visited);
        
        return total;
    }
};

    


// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        vector<vector<int>> m(n, vector<int> (n,0));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cin >> m[i][j];
            }
        }
        Solution obj;
        vector<string> result = obj.findPath(m, n);
        if (result.size() == 0)
            cout << -1;
        else
            for (int i = 0; i < result.size(); i++) cout << result[i] << " ";
        cout << endl;
    }
    return 0;
}  // } Driver Code Ends
